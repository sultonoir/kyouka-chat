generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url  	= env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // If you want to use Prisma Migrate, you will need to manually create a shadow database
  // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
  // make sure to append ?connect_timeout=10 to the connection string
  // shadowDatabaseUrl = env(“SHADOW_DATABASE_URL”)
}


model User {
  id                String      @id @default(uuid())
  email             String?     @unique
  username          String?     @unique
  name              String?
  emailVerified     DateTime?
  image             String?     @db.Text
  hashedPassword    String?
  onlineStatus      Boolean?    @default(false)
  lastSeen          DateTime?   @default(now())
  profileStatus     String?
  friend            Friend[]
  account           Account[]
  member            Member[]
  content           Content[]
  createdAt         DateTime?    @default(now()) 
  updatedAt         DateTime?    @updatedAt 
}

model Friend {
  id                String      @id @default(uuid())
  friendName        String
  authorId          String
  author            User       @relation(fields: [authorId],references: [id],onDelete: Cascade)
}

model Chat{
  id                String      @id @default(uuid())
  member            Member[]
  content           Content[]
  receiver          String?
  sender            String?
}

model Content{
  id                String      @id @default(uuid())
  file              String?
  body              String?
  lastseen          DateTime?    @default(now())
  deleted           Boolean?     @default(false)
  read              Boolean?     @default(false)
  authorId          String
  chatId            String?
  groupId           String?
  group             Group?       @relation(fields: [groupId],references: [id],onDelete: Cascade)         
  chat              Chat?          @relation(fields: [chatId],references: [id],onDelete: Cascade)
  user              User       @relation(fields: [authorId],references: [id])
  createdAt         DateTime?    @default(now()) 
  updatedAt         DateTime?    @updatedAt 
}

model Group {
  id                String      @id @default(uuid())
  name              String
  image             String?
  description       String
  conten            Content[]
  member            Member[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

enum MemberType {
  admin
  member
}

model Member{
  id                String      @id @default(uuid())
  userId            String
  role              MemberType  @default(member)
  groupId           String?
  chatId            String?
  chat              Chat?       @relation(fields: [chatId],references: [id],onDelete: Cascade)
  group             Group?       @relation(fields: [groupId],references: [id],onDelete: Cascade)
  user              User        @relation(fields: [userId],references: [id],onDelete: Cascade)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now())
}





model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

